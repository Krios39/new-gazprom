[{"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\reportWebVitals.js":"1","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\UserView.js":"2","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\Header.js":"3","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\AdminInformation.js":"4","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserArchive.js":"5","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformation.js":"6","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\GazpromCheckbox.js":"7","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\Request.js":"8","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\RequestList.js":"9","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\index.js":"10","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\authorization\\Authorization.js":"11","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\CreateRequest.js":"12","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\constants\\Urls.js":"13","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\GazpromDatePicker.js":"14"},{"size":375,"mtime":1608910337633,"results":"15","hashOfConfig":"16"},{"size":1508,"mtime":1608910428644,"results":"17","hashOfConfig":"16"},{"size":3212,"mtime":1608910428618,"results":"18","hashOfConfig":"16"},{"size":1895,"mtime":1608913023571,"results":"19","hashOfConfig":"16"},{"size":1473,"mtime":1608915230403,"results":"20","hashOfConfig":"16"},{"size":1446,"mtime":1608913082286,"results":"21","hashOfConfig":"16"},{"size":373,"mtime":1608910428610,"results":"22","hashOfConfig":"16"},{"size":14556,"mtime":1608910428638,"results":"23","hashOfConfig":"16"},{"size":14214,"mtime":1608915380559,"results":"24","hashOfConfig":"16"},{"size":607,"mtime":1608910428623,"results":"25","hashOfConfig":"16"},{"size":5948,"mtime":1608916213564,"results":"26","hashOfConfig":"16"},{"size":15780,"mtime":1608910428647,"results":"27","hashOfConfig":"16"},{"size":995,"mtime":1608910428621,"results":"28","hashOfConfig":"16"},{"size":2321,"mtime":1608910428612,"results":"29","hashOfConfig":"16"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"nfat7p",{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"41","usedDeprecatedRules":"36"},{"filePath":"42","messages":"43","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"44","messages":"45","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"46","messages":"47","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"48","usedDeprecatedRules":"36"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"51","usedDeprecatedRules":"36"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\reportWebVitals.js",[],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\UserView.js",["62"],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\Header.js",[],["63","64"],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\AdminInformation.js",["65","66"],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserArchive.js",["67","68"],"import Box from \"@material-ui/core/Box\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport RequestList from \"../../../components/RequestList\";\r\nimport UserInformationPanel from \"./UserInformationPanel\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport axios from \"axios\"\r\nimport {ALL_USERS_REQUESTS, BASE_URL} from \"../../../constants/Urls\";\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport {useHistory, useParams} from \"react-router\";\r\n\r\nexport default function UserArchive() {\r\n\r\n    const {accessToken} = useContext(accessTokenContext)\r\n    const {userId} = useParams()\r\n    const history = useHistory()\r\n    const [data, setData] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL + ALL_USERS_REQUESTS, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + accessToken\r\n            },\r\n            params: {\r\n                userId: userId\r\n            }\r\n        })\r\n            .then((resp) => {\r\n                setData(resp.data)\r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <Box>\r\n            <UserInformationPanel full={false}/>\r\n            <RequestList title=\"Список заявок сотрудника\" data={data} searchPanel privileges expiryDate status/>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformation.js",["69"],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\GazpromCheckbox.js",[],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\Request.js",["70"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {Button, CircularProgress, Grid, makeStyles, Typography, Dialog, Tooltip, Paper, Box} from \"@material-ui/core\";\r\nimport {withStyles} from \"@material-ui/core/styles\";\r\nimport axios from \"axios\"\r\nimport {ADMIN_AGREE, ADMIN_DISAGREE, BASE_URL, OWNER_AGREE, OWNER_DISAGREE, REQUEST} from \"../../../constants/Urls\";\r\nimport {accessTokenContext, roleContext} from \"../../../App\";\r\nimport clsx from \"clsx\";\r\nimport {GazpromTextField} from \"../../../components/GazpromTextField\";\r\n\r\nconst AgreeButton = withStyles({\r\n    root: {\r\n        width: \"40%\",\r\n        textTransform: 'none',\r\n        color: \"#219653\",\r\n        borderColor: \"#219653\",\r\n        backgroundColor: '#F6FFFA',\r\n        '&:hover': {\r\n            backgroundColor: '#F6FFFA'\r\n        }\r\n    }\r\n})(Button)\r\n\r\nconst DisagreeButton = withStyles({\r\n    root: {\r\n        width: \"40%\",\r\n        textTransform: 'none',\r\n        color: \"#EB5757\",\r\n        borderColor: \"#EB5757\",\r\n        backgroundColor: '#FFF5F5',\r\n        '&:hover': {\r\n            backgroundColor: '#FFF5F5'\r\n        }\r\n    }\r\n})(Button)\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n        paper: {\r\n            minWidth: \"80%\",\r\n        },\r\n        dialogBox: {\r\n            minWidth: 800,\r\n            display: \"flex\",\r\n            flexDirection: \"column\",\r\n            alignItems: \"center\",\r\n            paddingTop: 20,\r\n            paddingBottom: 20\r\n        },\r\n        label: {\r\n            fontSize: 24,\r\n            fontWeight: 600,\r\n        },\r\n        buttonBox: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"space-evenly\",\r\n            width: \"90%\",\r\n            marginTop: 20\r\n        },\r\n        informationPanel: {\r\n            width: \"90%\",\r\n            paddingBottom: 10,\r\n            marginTop: 10,\r\n            paddingTop: 10,\r\n            borderRadius: 16,\r\n            background: \"#e2f1f8\",\r\n        },\r\n        informationPanelText: {\r\n            fontSize: 20,\r\n            marginLeft: 20,\r\n            weight: 500\r\n        },\r\n        table: {\r\n            width: \"90%\",\r\n            paddingTop: theme.spacing(2),\r\n            borderRadius: 8,\r\n            backgroundColor: \"#F5F5F5\",\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            flexDirection: \"column\",\r\n        },\r\n        tableCell: {\r\n            backgroundColor: \"#fff\",\r\n            minHeight: 50,\r\n            margin: theme.spacing(1),\r\n            maxWidth: 900,\r\n            width: '97%',\r\n            borderRadius: 6,\r\n        },\r\n        borderCell: {\r\n            border: \"1px solid #d9d9d9\",\r\n        },\r\n        borderLabel: {\r\n            border: \"1px solid rgba(38, 38, 38, 0.4)\",\r\n        },\r\n        regularText: {\r\n            display: \"flex\",\r\n            flexDirection: \"row\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"flex-start\",\r\n            fontSize: 20,\r\n            weight: 500\r\n        },\r\n        listLabel: {\r\n            color: \"#0079C2\",\r\n            fontWeight: 600,\r\n        },\r\n        nameBox: {\r\n            paddingLeft: 30,\r\n        },\r\n        reasonTextField: {\r\n            width: \"90%\",\r\n        },\r\n        buttonProgress: {\r\n            color: '#06c',\r\n            top: '50%',\r\n            left: '50%',\r\n        },\r\n        progressBox: {\r\n            display: \"flex\",\r\n            alignItems: \"center\",\r\n            justifyContent: \"center\",\r\n            height: 200,\r\n            width: 200\r\n        }\r\n    }\r\n))\r\n\r\nexport default function Request({open, onClose}) {\r\n    const classes = useStyles()\r\n\r\n    const {requestId} = useParams()\r\n    const {accessToken} = useContext(accessTokenContext)\r\n    const [users, setUsers] = useState([])\r\n\r\n    const [system, setSystem] = useState(\"\")\r\n    const [date, setDate] = useState(\"\")\r\n    const [privileges, setPrivileges] = useState([])\r\n\r\n    const [reasonDialogOpen, setReasonDialogOpen] = useState(false)\r\n    const [reason, setReason] = useState(\"\")\r\n\r\n    const [adminConsent, setAdminConsent] = useState()\r\n\r\n    const [dataDownload, setDataDownload] = useState(false)\r\n\r\n    const {adminId} = useParams()\r\n    const {role} = useContext(roleContext)\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        if (open) axios.get(BASE_URL + REQUEST, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            },\r\n            params: {\r\n                requestId: requestId\r\n            }\r\n        }).then(resp => {\r\n            setData(resp.data)\r\n            setDataDownload(true)\r\n        })\r\n    }, [open])\r\n\r\n    useEffect(() => {\r\n        setDataDownload(false)\r\n        setReason(\"\")\r\n    }, [open])\r\n\r\n    const adminConsentChange = consent => {\r\n        setAdminConsent(consent)\r\n        setReasonDialogOpen(true)\r\n        setDataDownload(true)\r\n    }\r\n\r\n    const dateToString = date => {\r\n        if (date.year === 1) return \"-\"\r\n        const day = date.day\r\n        const month = date.month\r\n        const year = date.year + 1900\r\n        return `${day}.${month}.${year}`\r\n    }\r\n\r\n    const setData = data => {\r\n        setSystem(data.system)\r\n        setDate(dateToString(data.fillingDate))\r\n        setPrivileges(data.privileges)\r\n        setUsers(data.users)\r\n    }\r\n\r\n    const getPrivilegeTitle = (privilege, key) => {\r\n        if (key !== privileges.length - 1) return privilege.toString() + \", \"\r\n        else return privilege + \" \"\r\n    }\r\n\r\n    const sendConsent = () => {\r\n        const adminOrOwner = role === \"owner\" ? adminConsent ? OWNER_AGREE : OWNER_DISAGREE : adminConsent ? ADMIN_AGREE : ADMIN_DISAGREE\r\n        console.log(adminOrOwner)\r\n        axios.get(BASE_URL + adminOrOwner, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            },\r\n            params: {\r\n                requestId: requestId,\r\n                userId: adminId,\r\n                reason: reason\r\n            }\r\n        })\r\n            .then(resp => {\r\n                console.log(resp)\r\n            }).catch(e => {\r\n            if (e.response.status === 401) history.push('/authorization')\r\n        })\r\n    }\r\n\r\n    return (\r\n        <Dialog className={classes.dialog} maxWidth=\"lg\" open={open} onClose={() => onClose(-1)}>\r\n            {!dataDownload ?\r\n                <Box className={classes.progressBox}>\r\n                    <CircularProgress size={28} className={classes.buttonProgress}/>\r\n                </Box>\r\n                :\r\n                <Paper className={classes.dialogBox} elevation={3}>\r\n                    <Typography className={classes.label}>Заявка на обработку</Typography>\r\n                    <Box mx={2} className={classes.informationPanel}>\r\n                        <Typography className={classes.informationPanelText}>{system}</Typography>\r\n                        <Typography className={classes.informationPanelText}>Дата подачи:{date}</Typography>\r\n                        <Typography className={clsx(classes.informationPanelText, classes.regularText)}>Привилегии:\r\n                            {privileges.map((privilege, key) =>\r\n                                <Tooltip key={key} title={privilege.description}>\r\n                                    <Typography\r\n                                        className={clsx(classes.regularText)}>{getPrivilegeTitle(privilege.title, key)}</Typography>\r\n                                </Tooltip>\r\n                            )}\r\n                        </Typography>\r\n                    </Box>\r\n                    <Typography>Сотрудники на предоставление доступа:</Typography>\r\n                    <Box className={classes.table}>\r\n                        <Grid container\r\n                              className={clsx(classes.tableCell, classes.borderLabel)}\r\n                              direction=\"row\"\r\n                              justify=\"space-evenly\"\r\n                              alignItems=\"center\"\r\n                              spacing={2}\r\n                        >\r\n                            <Grid xs item zeroMinWidth container>\r\n                                <Typography noWrap className={clsx(classes.date, classes.listLabel, classes.nameBox)}>\r\n                                    <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\r\n                                        ФИО\r\n                                    </Box>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid xs item zeroMinWidth container justify=\"center\">\r\n                                <Typography noWrap className={clsx(classes.date, classes.listLabel)}>\r\n                                    <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\r\n                                        Должность\r\n                                    </Box>\r\n                                </Typography>\r\n                            </Grid>\r\n                            <Grid xs item zeroMinWidth container justify=\"center\">\r\n                                <Typography noWrap className={clsx(classes.date, classes.listLabel)}>\r\n                                    <Box component=\"div\" textOverflow=\"ellipsis\" overflow=\"hidden\">\r\n                                        Подразделение\r\n                                    </Box>\r\n                                </Typography>\r\n                            </Grid>\r\n\r\n                        </Grid>\r\n                        {users.map((user, key) =>\r\n                            <Grid key={key}\r\n                                  container\r\n                                  className={clsx(classes.tableCell, classes.borderCell)}\r\n                                  direction=\"row\"\r\n                                  justify=\"space-around\"\r\n                                  alignItems=\"center\"\r\n                                  spacing={2}\r\n\r\n                            >\r\n                                <Grid xs item wrap=\"nowrap\" zeroMinWidth container>\r\n                                    <Tooltip title={user.lastName + \" \" + user.name}>\r\n                                        <Typography noWrap className={clsx(classes.date, classes.nameBox)}>\r\n                                            <Box\r\n                                                component=\"div\"\r\n                                                textOverflow=\"ellipsis\"\r\n                                                overflow=\"hidden\"\r\n                                            >\r\n                                                {user.lastName + \" \" + user.name}\r\n                                            </Box>\r\n                                        </Typography>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                                <Grid xs item wrap=\"nowrap\" zeroMinWidth container justify=\"center\">\r\n                                    <Typography noWrap className={classes.date}>\r\n                                        <Box\r\n                                            component=\"div\"\r\n                                            textOverflow=\"ellipsis\"\r\n                                            overflow=\"hidden\"\r\n                                        >aaaaaaaaaaaaa\r\n\r\n                                        </Box>\r\n                                    </Typography>\r\n                                </Grid>\r\n                                <Grid xs item wrap=\"nowrap\" zeroMinWidth container justify=\"center\">\r\n                                    <Tooltip title={user.department}>\r\n                                        <Typography noWrap className={classes.date}>\r\n                                            <Box\r\n                                                component=\"div\"\r\n                                                textOverflow=\"ellipsis\"\r\n                                                overflow=\"hidden\"\r\n                                            >\r\n                                                {user.department}\r\n                                            </Box>\r\n                                        </Typography>\r\n                                    </Tooltip>\r\n                                </Grid>\r\n                            </Grid>\r\n                        )}\r\n                    </Box>\r\n                    <Box className={classes.buttonBox}>\r\n                        <AgreeButton onClick={() => adminConsentChange(true)}\r\n                                     variant=\"outlined\">Согласовать</AgreeButton>\r\n                        <DisagreeButton onClick={() => adminConsentChange(false)} variant=\"outlined\">Отправить на\r\n                            доработку</DisagreeButton>\r\n                    </Box>\r\n                </Paper>\r\n            }\r\n            <Dialog maxWidth=\"lg\" open={reasonDialogOpen} onClose={() => setReasonDialogOpen(false)}>\r\n                <Paper className={classes.dialogBox} elevation={3}>\r\n                    <Typography\r\n                        className={classes.label}>{adminConsent ? \"Вы действительно хотите одобрить заявку?\" : \"Вы действительно хотите отклонить заявку?\"}</Typography>\r\n                    {!adminConsent && <GazpromTextField\r\n                        size=\"small\"\r\n                        className={classes.reasonTextField}\r\n                        variant=\"outlined\"\r\n                        multiline\r\n                        rows={6}\r\n                        placeholder=\"Напишите причину отклонения заявки...\"\r\n                        value={reason}\r\n                        onChange={(event) => setReason(event.target.value)}\r\n                    />}\r\n                    <Box className={classes.buttonBox}>\r\n                        <AgreeButton onClick={sendConsent} variant=\"outlined\">Да</AgreeButton>\r\n                        <DisagreeButton onClick={() => setReasonDialogOpen(false)}\r\n                                        variant=\"outlined\">Отмена</DisagreeButton>\r\n                    </Box>\r\n                </Paper>\r\n            </Dialog>\r\n        </Dialog>\r\n    )\r\n}","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\RequestList.js",["71"],"import {Box, FormControl, Grid, InputBase, MenuItem, Select, Typography} from \"@material-ui/core\";\r\nimport React, {useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport clsx from \"clsx\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport {useHistory, useParams} from \"react-router-dom\";\r\nimport Request from \"../views/admin/adminComponents/Request\";\r\nimport GazpromFilterPanel from \"./GazpromFilterPanel\";\r\n\r\n\r\nconst GazpromInput = withStyles((theme) => ({\r\n    root: {\r\n        color: \"#888\",\r\n        width: theme.spacing(22),\r\n        'label + &': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        borderRadius: 4,\r\n        border: '1px solid #D9D9D9',\r\n        fontSize: 16,\r\n        padding: '10px 26px 10px 12px',\r\n        '&:focus': {\r\n            borderRadius: 4,\r\n            borderColor: '#2D9CDB',\r\n        },\r\n    },\r\n}))(InputBase);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    header: {\r\n        margin: \"17px 0px 17px 0px\",\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        justifyContent: \"space-between\",\r\n        alignItems: \"center\",\r\n        height: 42\r\n    },\r\n    sortBox: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"center\"\r\n    },\r\n    margin: {\r\n        margin: theme.spacing(1),\r\n    },\r\n    label: {\r\n        fontSize: 24,\r\n        fontWeight: 600,\r\n    },\r\n    table: {\r\n        paddingTop: theme.spacing(2),\r\n        borderRadius: 8,\r\n        backgroundColor: \"#F5F5F5\",\r\n        display: \"flex\",\r\n        alignItems: \"center\",\r\n        justifyContent: \"center\",\r\n        flexDirection: \"column\",\r\n    },\r\n    tableCell: {\r\n        backgroundColor: \"#fff\",\r\n        minHeight: 50,\r\n        margin: theme.spacing(1),\r\n        maxWidth: 900,\r\n        width: '97%',\r\n        borderRadius: 6,\r\n    },\r\n    borderCell: {\r\n        border: \"1px solid #d9d9d9\",\r\n    },\r\n    borderLabel: {\r\n        border: \"1px solid rgba(38, 38, 38, 0.4)\",\r\n    },\r\n    system: {\r\n        margin: theme.spacing(3),\r\n        fontSize: 18,\r\n        width: \"50%\"\r\n    },\r\n    date: {\r\n        marginLeft: theme.spacing(3),\r\n        marginRight: theme.spacing(3),\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        maxWidth: 220,\r\n        minWidth: 0,\r\n        overflow: \"hidden\",\r\n        textOverflow: \"ellipsis\"\r\n    },\r\n    listLabel: {\r\n        color: \"#0079C2\",\r\n        fontWeight: 600,\r\n    },\r\n    requestFullWidth: {\r\n        width: \"100%\"\r\n    },\r\n    requestBox: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"flex-start\",\r\n    }\r\n}))\r\n\r\nexport default function RequestList({title, data, searchPanel, privileges, expiryDate, status, admin}) {\r\n    const classes = useStyles()\r\n    const [selectSortCategory, setSelectSortCategory] = useState(0)\r\n    const [sortOrder, setSortOrder] = useState(10)\r\n    const [requests, setRequests] = useState([])\r\n\r\n    const [sortCategories, setSortCategories] = useState([])\r\n\r\n    const [newRequest, setNewRequest] = useState([])\r\n\r\n    const [requestOpen, setRequestOpen] = useState(false)\r\n\r\n    const [columnWidths, setColumnWidths] = useState([])\r\n\r\n    const {requestId} = useParams()\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        const adminCheck = () => {\r\n            if (admin) if (requestId !== \"-1\") setRequestOpen(true)\r\n            else setRequestOpen(false)\r\n        }\r\n        adminCheck()\r\n    }, [admin, requestId])\r\n\r\n    useEffect(() => {\r\n        let a = []\r\n        const makeNewRequest = () => {\r\n            requests.map((request) => {\r\n                const c = []\r\n                c.push(request.idRequest)\r\n                c.push(request.system)\r\n                if (privileges) c.push(request.privileges)\r\n                if (expiryDate) if (request.expiryDate) c.push(dateToString(request.fillingDate))\r\n                else c.push(dateToString(\"Бессрочно\"))\r\n                c.push(dateToString(request.expiryDate))\r\n                if (status) c.push(getStatus(request.status))\r\n                a.push(c)\r\n                return a\r\n            })\r\n        }\r\n        makeNewRequest()\r\n        setNewRequest(a)\r\n    }, [expiryDate, privileges, requests, status])\r\n\r\n    useEffect(() => {\r\n        setRequests(data)\r\n    }, [data])\r\n\r\n    useEffect(() => {\r\n        let a = []\r\n        let b = []\r\n        const makeTableTitle = () => {\r\n            a.push(\"Информационная система\")\r\n            if (privileges) a.push(\"Привелегии\")\r\n            a.push(\"Дата подачи\")\r\n            if (expiryDate) a.push(\"Дата выдачи\")\r\n            if (status) a.push(\"Статус\")\r\n            if (a.length === 3) b = [{xs: 6}, {xs: 'auto'}, {xs: 'auto'}]\r\n            if (a.length === 4) b = [{xs: 5}, {xs: 'auto'}, {xs: 'auto'}, {xs: 'auto'}]\r\n            if (a.length === 5) b = [{xs: 4}, {xs: 'auto'}, {xs: 'auto'}, {xs: 'auto'}, {xs: 'auto'}]\r\n        }\r\n        makeTableTitle()\r\n        setColumnWidths(b)\r\n        setSortCategories(a)\r\n    }, [expiryDate, privileges, status])\r\n\r\n\r\n    useEffect(() => {\r\n        const tableSort = () => {\r\n            const arr = [...newRequest]\r\n            const categoryName = sortCategories[selectSortCategory]\r\n\r\n            if (categoryName === \"Дата выдачи\" || categoryName === \"Дата подачи\") arr.sort((a, b) => {\r\n                    const parts1 = a[selectSortCategory].split('.');\r\n                    const parts2 = b[selectSortCategory].split('.');\r\n                    const date1 = new Date(parts1[2], parts1[1] - 1, parts1[0]);\r\n                    const date2 = new Date(parts2[2], parts2[1] - 1, parts2[0]);\r\n                    return date1 > date2 ? 1 : -1\r\n                }\r\n            )\r\n            else arr.sort((a, b) => a[selectSortCategory] > b[selectSortCategory] ? 1 : -1)\r\n            if (arr.length !== 0) sortOrder === 10 ? setNewRequest(arr) : setNewRequest(arr.reverse())\r\n        }\r\n        tableSort()\r\n    }, [])\r\n\r\n    const sortCategoryHandleChange = (event) => {\r\n        setSelectSortCategory(event.target.value)\r\n    }\r\n\r\n    const sortOrderHandleChange = (event) => {\r\n        setSortOrder(event.target.value)\r\n    }\r\n\r\n    const dateToString = date => {\r\n        if (date.year === 1) return \"-\"\r\n        const day = date.day\r\n        const month = date.month + 1\r\n        const year = date.year + 1900\r\n        return `${day}.${month}.${year}`\r\n    }\r\n\r\n    const getStatus = status => {\r\n        let a = \"\"\r\n        switch (status) {\r\n            case \"STATUS_SHIPPED\":\r\n                a = \"Отправлена\"\r\n                break\r\n            case \"STATUS_ENABLE\":\r\n                a = \"Активна\"\r\n                break\r\n            case \"STATUS_DISABLED\":\r\n                a = \"Неактивна\"\r\n                break\r\n            case \"STATUS_REFUSED\":\r\n                a = \"Отменена\"\r\n                break\r\n            default:\r\n                a = status\r\n                break\r\n        }\r\n        return a\r\n    }\r\n\r\n    const onRequestClick = (requestId) => {\r\n        if (admin) {\r\n            history.push(`${requestId}`)\r\n        }\r\n    }\r\n\r\n    return (\r\n        <Box mx={2} className={classes.requestBox}>\r\n            {searchPanel &&  <GazpromFilterPanel admin/>}\r\n            <Box className={classes.requestFullWidth}>\r\n                <Box className={classes.header}>\r\n                    <Typography className={classes.label}>\r\n                        {title}\r\n                    </Typography>\r\n                    <Box className={classes.sortBox}>\r\n                        <Typography>\r\n                            Сортировать по:\r\n                        </Typography>\r\n                        <FormControl className={classes.margin}>\r\n                            <Select\r\n                                value={selectSortCategory}\r\n                                onChange={sortCategoryHandleChange}\r\n                                input={<GazpromInput/>}\r\n                            >\r\n                                {sortCategories.map((category, key) =>\r\n                                    <MenuItem key={key} value={key}>{category}</MenuItem>\r\n                                )\r\n                                }\r\n                            </Select>\r\n                        </FormControl>\r\n                        <FormControl className={classes.margin}>\r\n                            <Select\r\n                                value={sortOrder}\r\n                                onChange={sortOrderHandleChange}\r\n                                input={<GazpromInput/>}\r\n                            >\r\n                                <MenuItem value={10}>Возрастанию</MenuItem>\r\n                                <MenuItem value={20}>Убыванию</MenuItem>\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Box>\r\n                </Box>\r\n\r\n                <Box className={classes.table}>\r\n                    <Grid container\r\n                          className={clsx(classes.tableCell, classes.borderLabel)}\r\n                          wrap=\"nowrap\"\r\n                          direction=\"row\"\r\n                          justify=\"space-around\"\r\n                          alignItems=\"center\"\r\n                          spacing={2}\r\n                    >\r\n                        {sortCategories.map((category, key) =>\r\n                            <Grid key={key}\r\n                                  wrap=\"nowrap\"\r\n                                  item\r\n                                  xs={columnWidths[key].xs}\r\n                                  container\r\n                                  justify=\"center\"\r\n                            >\r\n                                <Typography\r\n                                    component={'span'}\r\n                                    noWrap\r\n                                    className={clsx(classes.date, classes.listLabel)}>\r\n                                    <Box\r\n                                        component=\"div\"\r\n                                        textOverflow=\"ellipsis\"\r\n                                        overflow=\"hidden\"\r\n                                    >\r\n                                        {category}\r\n                                    </Box>\r\n                                </Typography>\r\n                            </Grid>\r\n                        )\r\n                        }\r\n                    </Grid>\r\n\r\n                    {newRequest.map((cellItem, key) =>\r\n                        <Grid key={key}\r\n                              container\r\n                              className={clsx(classes.tableCell, classes.borderCell)}\r\n                              direction=\"row\"\r\n                              justify=\"space-around\"\r\n                              alignItems=\"center\"\r\n                              wrap=\"nowrap\"\r\n                              spacing={2}\r\n                              onClick={() => onRequestClick(cellItem[0])}\r\n                        >\r\n                            {cellItem.map((item1, key1) =>\r\n                                (key1 !== 0) &&\r\n                                <Grid key={key1}\r\n                                      wrap=\"nowrap\"\r\n                                      item\r\n                                      xs={columnWidths[key1 - 1].xs}\r\n                                      container justify=\"center\"\r\n                                >\r\n                                    {(Array.isArray(item1)) ?\r\n                                        <Grid container direction=\"column\" alignItems=\"center\">\r\n                                            {item1.map((privilege, key2) =>\r\n                                                <Grid key={key2}\r\n                                                      item\r\n                                                      xs\r\n                                                      zeroMinWidth>\r\n                                                    <Tooltip key={key2} title={privilege.title}>\r\n                                                        <Typography component={'span'} noWrap className={classes.date}>\r\n                                                            <Box\r\n                                                                component=\"div\"\r\n                                                                textOverflow=\"ellipsis\"\r\n                                                                overflow=\"hidden\"\r\n                                                            >\r\n                                                                {privilege.title}\r\n                                                            </Box>\r\n                                                        </Typography>\r\n                                                    </Tooltip>\r\n                                                </Grid>\r\n                                            )}\r\n                                        </Grid>\r\n                                        :\r\n                                        <Tooltip title={item1}>\r\n                                            <Typography component={'span'} noWrap className={classes.date}>\r\n                                                <Box\r\n                                                    component=\"div\"\r\n                                                    textOverflow=\"ellipsis\"\r\n                                                    overflow=\"hidden\"\r\n                                                >\r\n                                                    {item1}\r\n                                                </Box>\r\n                                            </Typography>\r\n                                        </Tooltip>}\r\n                                </Grid>\r\n                            )}\r\n                        </Grid>\r\n                    )}\r\n                </Box>\r\n            </Box>\r\n            <Request open={requestOpen} onClose={() => onRequestClick(-1)}/>\r\n        </Box>\r\n    )\r\n}\r\n","C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\index.js",[],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\authorization\\Authorization.js",[],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\CreateRequest.js",["72"],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\constants\\Urls.js",[],"C:\\Users\\Lenovo\\Desktop\\ГПО\\new-gazprom\\src\\components\\GazpromDatePicker.js",[],{"ruleId":"73","severity":1,"message":"74","line":1,"column":16,"nodeType":"75","messageId":"76","endLine":1,"endColumn":25},{"ruleId":"77","replacedBy":"78"},{"ruleId":"79","replacedBy":"80"},{"ruleId":"73","severity":1,"message":"81","line":4,"column":8,"nodeType":"75","messageId":"76","endLine":4,"endColumn":26},{"ruleId":"73","severity":1,"message":"82","line":5,"column":9,"nodeType":"75","messageId":"76","endLine":5,"endColumn":19},{"ruleId":"73","severity":1,"message":"82","line":5,"column":9,"nodeType":"75","messageId":"76","endLine":5,"endColumn":19},{"ruleId":"83","severity":1,"message":"84","line":36,"column":8,"nodeType":"85","endLine":36,"endColumn":10,"suggestions":"86"},{"ruleId":"83","severity":1,"message":"87","line":34,"column":7,"nodeType":"85","endLine":34,"endColumn":9,"suggestions":"88"},{"ruleId":"83","severity":1,"message":"89","line":166,"column":8,"nodeType":"85","endLine":166,"endColumn":14,"suggestions":"90"},{"ruleId":"83","severity":1,"message":"91","line":191,"column":8,"nodeType":"85","endLine":191,"endColumn":10,"suggestions":"92"},{"ruleId":"83","severity":1,"message":"93","line":124,"column":8,"nodeType":"85","endLine":124,"endColumn":10,"suggestions":"94"},"no-unused-vars","'useEffect' is defined but never used.","Identifier","unusedVar","no-native-reassign",["95"],"no-negated-in-lhs",["96"],"'GazpromSearchPanel' is defined but never used.","'makeStyles' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'userId'. Either include them or remove the dependency array.","ArrayExpression",["97"],"React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'params.userId'. Either include them or remove the dependency array.",["98"],"React Hook useEffect has missing dependencies: 'accessToken', 'requestId', and 'setData'. Either include them or remove the dependency array.",["99"],"React Hook useEffect has missing dependencies: 'newRequest', 'selectSortCategory', 'sortCategories', and 'sortOrder'. Either include them or remove the dependency array.",["100"],"React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'workerSelfException'. Either include them or remove the dependency array.",["101"],"no-global-assign","no-unsafe-negation",{"desc":"102","fix":"103"},{"desc":"104","fix":"105"},{"desc":"106","fix":"107"},{"desc":"108","fix":"109"},{"desc":"110","fix":"111"},"Update the dependencies array to be: [accessToken, history, userId]",{"range":"112","text":"113"},"Update the dependencies array to be: [accessToken, history, params.userId]",{"range":"114","text":"115"},"Update the dependencies array to be: [accessToken, open, requestId, setData]",{"range":"116","text":"117"},"Update the dependencies array to be: [newRequest, selectSortCategory, sortCategories, sortOrder]",{"range":"118","text":"119"},"Update the dependencies array to be: [accessToken, history, workerSelfException]",{"range":"120","text":"121"},[1219,1221],"[accessToken, history, userId]",[1147,1149],"[accessToken, history, params.userId]",[4806,4812],"[accessToken, open, requestId, setData]",[6030,6032],"[newRequest, selectSortCategory, sortCategories, sortOrder]",[3897,3899],"[accessToken, history, workerSelfException]"]