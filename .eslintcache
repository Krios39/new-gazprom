[{"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\App.js":"1","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\index.js":"2","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\reportWebVitals.js":"3","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\UserView.js":"4","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\authorization\\Authorization.js":"5","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\AdminView.js":"6","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromTextField.js":"7","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromDialog.js":"8","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\Header.js":"9","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserArchive.js":"10","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\RequestList.js":"11","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromSearchPanel.js":"12","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromDatePicker.js":"13","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromButton.js":"14","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\CreateRequest.js":"15","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformationPanel.js":"16","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformation.js":"17","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\constants\\Urls.js":"18","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\AdminInformation.js":"19","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\WorkerRegistration.js":"20","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\Request.js":"21"},{"size":1023,"mtime":1608485094973,"results":"22","hashOfConfig":"23"},{"size":588,"mtime":1607002315155,"results":"24","hashOfConfig":"23"},{"size":362,"mtime":1606998054208,"results":"25","hashOfConfig":"23"},{"size":2100,"mtime":1608198507968,"results":"26","hashOfConfig":"23"},{"size":6748,"mtime":1608485376650,"results":"27","hashOfConfig":"23"},{"size":1400,"mtime":1608374936797,"results":"28","hashOfConfig":"23"},{"size":704,"mtime":1607069348149,"results":"29","hashOfConfig":"23"},{"size":997,"mtime":1607069348156,"results":"30","hashOfConfig":"23"},{"size":3212,"mtime":1607882228117,"results":"31","hashOfConfig":"23"},{"size":1862,"mtime":1608499211845,"results":"32","hashOfConfig":"23"},{"size":13631,"mtime":1608528240585,"results":"33","hashOfConfig":"23"},{"size":5531,"mtime":1608499560725,"results":"34","hashOfConfig":"23"},{"size":2321,"mtime":1608518162447,"results":"35","hashOfConfig":"23"},{"size":314,"mtime":1608435471406,"results":"36","hashOfConfig":"23"},{"size":15804,"mtime":1608494934190,"results":"37","hashOfConfig":"23"},{"size":2165,"mtime":1608379596073,"results":"38","hashOfConfig":"23"},{"size":1429,"mtime":1608499275691,"results":"39","hashOfConfig":"23"},{"size":995,"mtime":1608486238400,"results":"40","hashOfConfig":"23"},{"size":2187,"mtime":1608520181460,"results":"41","hashOfConfig":"23"},{"size":13900,"mtime":1608492445347,"results":"42","hashOfConfig":"23"},{"size":14588,"mtime":1608489779150,"results":"43","hashOfConfig":"23"},{"filePath":"44","messages":"45","errorCount":1,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"cmazmo",{"filePath":"46","messages":"47","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"48"},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"66","usedDeprecatedRules":"51"},{"filePath":"67","messages":"68","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"51"},{"filePath":"72","messages":"73","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"74","messages":"75","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"78","usedDeprecatedRules":"48"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81","usedDeprecatedRules":"51"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"84","usedDeprecatedRules":"51"},{"filePath":"85","messages":"86","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"87","messages":"88","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"51"},{"filePath":"89","messages":"90","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"91","usedDeprecatedRules":"51"},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\App.js",["94"],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\index.js",[],["95","96"],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\reportWebVitals.js",[],["97","98"],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\UserView.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\authorization\\Authorization.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\AdminView.js",["99","100","101"],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromTextField.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromDialog.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\Header.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserArchive.js",["102"],"import Box from \"@material-ui/core/Box\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport RequestList from \"../../../components/RequestList\";\r\nimport UserInformationPanel from \"./UserInformationPanel\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport GazpromSearchPanel from \"../../../components/GazpromSearchPanel\";\r\nimport axios from \"axios\"\r\nimport {ALL_USERS_REQUESTS, BASE_URL} from \"../../../constants/Urls\";\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport {useHistory, useParams} from \"react-router\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    requestBox: {\r\n        display: \"flex\",\r\n        flexDirection: \"row\",\r\n        alignItems: \"flex-start\",\r\n    }\r\n}))\r\n\r\nexport default function UserArchive() {\r\n    const classes = useStyles()\r\n\r\n    const {accessToken} = useContext(accessTokenContext)\r\n    const {userId} = useParams()\r\n    const history = useHistory()\r\n    const [data,setData] = useState([])\r\n\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL +ALL_USERS_REQUESTS, {\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'Authorization': 'Bearer ' + accessToken\r\n            },\r\n            params: {\r\n                userId: userId\r\n            }\r\n        })\r\n            .then((resp) => {\r\n                setData(resp.data)\r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n\r\n            })\r\n    }, [])\r\n\r\n    return (\r\n        <Box>\r\n            <UserInformationPanel full={false}/>\r\n            <Box mx={2} className={classes.requestBox}>\r\n                <GazpromSearchPanel/>\r\n                <RequestList title=\"Список заявок сотрудника\" data={data} searchPanel privileges expiryDate status/>\r\n            </Box>\r\n        </Box>\r\n    )\r\n}\r\n\r\n\r\n\r\n","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\RequestList.js",["103"],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromSearchPanel.js",["104"],"import withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport Checkbox from \"@material-ui/core/Checkbox\";\r\nimport React, {useState} from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {Typography} from \"@material-ui/core\";\r\nimport {GazpromTextField, SmallGazpromTextField} from \"./GazpromTextField\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport FormGroup from \"@material-ui/core/FormGroup\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport GazpromDatePicker from \"./GazpromDatePicker\";\r\nimport {GazpromButton} from \"./GazpromButton\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\n\r\n\r\nconst GazpromCheckbox = withStyles({\r\n    root: {\r\n        color: '#2D9CDB',\r\n        '&$checked': {\r\n            color: '#2D9CDB',\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    panelBox: {\r\n        paddingRight: 30,\r\n        marginTop: 76,\r\n        width: \"17%\"\r\n    },\r\n    labelText: {\r\n        fontWeight: 600,\r\n        marginBottom: 13\r\n    },\r\n    checkBox: {\r\n        height: 22,\r\n        marginBottom: 13\r\n    },\r\n    littleText: {\r\n        color: \"#595959\",\r\n        fontSize: 14,\r\n    },\r\n    margin: {\r\n        marginBottom: 13\r\n    }\r\n}))\r\n\r\n\r\nexport default function GazpromSearchPanel({admin}) {\r\n    const classes = useStyles()\r\n\r\n    const [fillingDateStart, setFillingDateStart] = useState()\r\n    const [fillingDateEnd, setFillingDateEnd] = useState()\r\n    const [expiryDateStart, setExpiryDateStart] = useState()\r\n    const [expiryDateEnd, setExpiryDateEnd] = useState(new Date())\r\n\r\n\r\n    const [state, setState] = useState({\r\n        gilad: true,\r\n        jason: false,\r\n        antoine: false,\r\n    });\r\n\r\n    const handleChange = (event) => {\r\n        setState({...state, [event.target.name]: event.target.checked});\r\n    };\r\n\r\n    const {active, notActive, rejected, submitted} = state;\r\n\r\n    return (\r\n        <Box className={classes.panelBox}>\r\n            <Box>\r\n                <Typography className={classes.labelText}>Инф система</Typography>\r\n                <SmallGazpromTextField\r\n                    className={classes.margin}\r\n                    size=\"small\"\r\n                    variant=\"outlined\"\r\n                />\r\n            </Box>\r\n            {!admin && <Box>\r\n                <Typography className={classes.labelText}>Статус заявки</Typography>\r\n\r\n                <FormControl component=\"fieldset\">\r\n                    <FormGroup>\r\n                        <FormControlLabel\r\n                            className={classes.checkBox}\r\n                            control={<GazpromCheckbox checked={active} onChange={handleChange}/>}\r\n                            label={<Typography className={classes.littleText}>Активна</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className={classes.checkBox}\r\n                            control={<GazpromCheckbox\r\n                                checked={notActive}\r\n                                onChange={handleChange}\r\n                                name=\"Не активна\"/>}\r\n                            label={<Typography className={classes.littleText}>Не активна</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className={classes.checkBox}\r\n                            control={<GazpromCheckbox checked={rejected} onChange={handleChange} name=\"Отклонена\"/>}\r\n                            label={<Typography className={classes.littleText}>Отклонена</Typography>}\r\n                        />\r\n                        <FormControlLabel\r\n                            className={classes.checkBox}\r\n                            control={<GazpromCheckbox checked={submitted} onChange={handleChange} name=\"Отправлена\"/>}\r\n                            label={<Typography className={classes.littleText}>Отправлена</Typography>}\r\n                        />\r\n                    </FormGroup>\r\n                </FormControl>\r\n            </Box>}\r\n\r\n\r\n            <Box>\r\n                <Typography className={classes.labelText}>Дата подачи</Typography>\r\n                <GazpromDatePicker className={classes.margin} size={\"small\"} value={fillingDateStart}\r\n                                   onChange={setFillingDateStart}/>\r\n                <GazpromDatePicker className={classes.margin} size={\"small\"} value={fillingDateEnd}\r\n                                   onChange={setFillingDateEnd} placeholder=\"Напишите причину отклонения заявки...\" />\r\n            </Box>\r\n\r\n            {!admin && <Box>\r\n                <Typography className={classes.labelText}>Дата выдачи</Typography>\r\n                <GazpromDatePicker className={classes.margin} size={\"small\"} value={expiryDateStart}\r\n                                   onChange={setExpiryDateStart}  placeholder=\"Напишите причину отклонения заявки...\"/>\r\n                <GazpromDatePicker className={classes.margin} size={\"small\"} value={expiryDateEnd}\r\n                                   onChange={setExpiryDateEnd}/>\r\n            </Box>}\r\n\r\n            <GazpromButton\r\n                fullWidth\r\n                variant=\"contained\"\r\n                color=\"primary\">\r\n                Найти\r\n            </GazpromButton>\r\n\r\n        </Box>\r\n    )\r\n}","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromDatePicker.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\components\\GazpromButton.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\CreateRequest.js",["105"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {\r\n    Box, Container,\r\n    Dialog, DialogTitle, DialogContent, DialogActions,\r\n    List, ListItem, ListItemIcon, ListItemText,\r\n    Paper, Radio,\r\n    Typography, FormControlLabel, Checkbox, CircularProgress, Link\r\n} from \"@material-ui/core\";\r\nimport {GazpromButton} from \"../../../components/GazpromButton\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {GazpromTextField} from \"../../../components/GazpromTextField\";\r\nimport axios from \"axios\"\r\nimport {ADD_REQUEST, ALL_SYSTEMS, ALL_USERS, BASE_URL} from \"../../../constants/Urls\";\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nconst GazpromRadio = withStyles({\r\n    root: {\r\n        color: '#2D9CDB',\r\n        '&$checked': {\r\n            color: '#2D9CDB',\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Radio color=\"default\" {...props} />);\r\n\r\nconst GazpromCheckbox = withStyles({\r\n    root: {\r\n        color: '#2D9CDB',\r\n        '&$checked': {\r\n            color: '#2D9CDB',\r\n        },\r\n    },\r\n    checked: {},\r\n})((props) => <Checkbox color=\"default\" {...props} />);\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    main: {\r\n        marginTop: \"15%\"\r\n    },\r\n    formElement: {\r\n        marginBottom: \"20px\",\r\n        position: \"relative\"\r\n    },\r\n    paper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n    },\r\n    margin: {\r\n        width: \"90%\"\r\n    },\r\n    regularText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\"\r\n    },\r\n\r\n    titleText: {\r\n        marginTop: theme.spacing(3),\r\n        fontWeight: 600\r\n    },\r\n    buttonProgress: {\r\n        color: '#06c',\r\n        position: 'absolute',\r\n        left: '50%',\r\n        marginLeft: -12,\r\n    },\r\n    systems: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\",\r\n        maxHeight: 250\r\n    },\r\n    boldText:{\r\n        fontWeight: 600\r\n    }\r\n}));\r\n\r\nexport default function CreateRequest() {\r\n    const classes = useStyles()\r\n\r\n    const [loading, setLoading] = useState(false)\r\n\r\n    const [systemDialogOpen, setSystemDialogOpen] = useState(false)\r\n    const [roleDialogOpen, setRoleDialogOpen] = useState(false)\r\n\r\n    const [systems, setSystems] = useState([])\r\n    const [selectedSystem, setSelectedSystem] = useState(0)\r\n    const [privileges, setPrivileges] = useState([])\r\n    const [selectedPrivileges, setSelectedPrivileges] = useState([])\r\n    const [workers, setWorkers] = useState([])\r\n    const [filterWorkers, setFilterWorkers] = useState([])\r\n    const [selectedWorkers, setSelectedWorkers] = useState([])\r\n\r\n    const [dialogStep, setDialogStep] = useState(0)\r\n    const [search, setSearch] = useState(\"\")\r\n    const {userId} = useParams()\r\n    const history = useHistory()\r\n\r\n    const date = new Date()\r\n\r\n    const {accessToken} = useContext(accessTokenContext)\r\n\r\n    useEffect(() => {\r\n        const request = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            }\r\n        }\r\n\r\n        axios.get(BASE_URL + ALL_SYSTEMS, request)\r\n            .then(resp => {\r\n                setSystems(resp.data)\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 401) history.push('/authorization')\r\n                // if (error.response.status === 500) handleOpen(\"Ошибка сервера\")\r\n            })\r\n\r\n        axios.get(BASE_URL + ALL_USERS, request)\r\n            .then(resp => {\r\n                workerSelfException(resp.data)\r\n            })\r\n            .catch(error => {\r\n                if (error.response.status === 401) history.push('/authorization')\r\n                //if (error.response.status === 500) handleOpen(\"Ошибка сервера\")\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (systems.length !== 0) {\r\n            setSelectedSystem(systems[0].id)\r\n            setPrivileges(systems[0].privileges)\r\n        }\r\n        setSelectedPrivileges([])\r\n    }, [systems])\r\n\r\n    useEffect(() => {\r\n        setLoading(systemDialogOpen)\r\n    }, [systemDialogOpen])\r\n\r\n    useEffect(() => {\r\n        if (dialogStep < 0 || dialogStep > 1) setSystemDialogOpen(false)\r\n    }, [dialogStep])\r\n\r\n    useEffect(() => {\r\n        if (search !== \"\") {\r\n            setFilterWorkers(workers.filter(worker => worker.name.indexOf(search, 0) > -1))\r\n        } else setFilterWorkers(workers)\r\n    }, [search, workers])\r\n\r\n    const workerSelfException = (data) => {\r\n        let a = [...data]\r\n        data.map(user => {\r\n            if (user.userId.toString() === userId) {\r\n                a.splice(a.indexOf(user), 1)\r\n            }\r\n            return a\r\n        })\r\n        setWorkers(a)\r\n    }\r\n\r\n    const systemChange = (id) => {\r\n        setSelectedSystem(id)\r\n        if (systems.length !== 0) setPrivileges(systems[systems.indexOf(systems.find(system => system.id === id))].privileges)\r\n        setSelectedPrivileges([])\r\n    }\r\n\r\n    const privilegeChange = (key) => {\r\n        if (selectedPrivileges.indexOf(privileges[key].id) !== -1) {\r\n            let a = [...selectedPrivileges]\r\n            a.splice(selectedPrivileges.indexOf(privileges[key].id), 1)\r\n            setSelectedPrivileges(a)\r\n        } else setSelectedPrivileges(prevState => [...prevState, privileges[key].id])\r\n    }\r\n\r\n    const workerSelectChange = (worker) => {\r\n        if (selectedWorkers.indexOf(worker.userId) !== -1) {\r\n            let a = [...selectedWorkers]\r\n            a.splice(selectedWorkers.indexOf(worker.userId), 1)\r\n            setSelectedWorkers(a)\r\n        } else setSelectedWorkers(prevState => [...prevState, worker.userId])\r\n    }\r\n\r\n    const handleKeyPress = (event) => {\r\n        if (event.key === 'Enter') {\r\n            sendRequest()\r\n        }\r\n    }\r\n\r\n    const sendRequest = () => {\r\n        setLoading(true)\r\n        const request = {\r\n            usersId: [...selectedWorkers, Number(userId)],\r\n            privilegesId: selectedPrivileges,\r\n            idSystem: selectedSystem\r\n        }\r\n        const headers = {\r\n            'Content-Type': 'application/json',\r\n            'Authorization': 'Bearer ' + accessToken\r\n        }\r\n        axios.post(BASE_URL + ADD_REQUEST, request, {\r\n            headers: headers\r\n        })\r\n            .then(() => {\r\n                setLoading(false)\r\n                history.push(`/user=${userId}/info`)\r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n                setLoading(false)\r\n            })\r\n    }\r\n\r\n    const dialogStepChange = step => {\r\n        setDialogStep(prevState => prevState + step)\r\n    }\r\n\r\n    const dialogOpen = step=>{\r\n        setDialogStep(step)\r\n        setSystemDialogOpen(true)\r\n    }\r\n\r\n    const getPrivilegesString = () => {\r\n        let a = []\r\n        privileges.map(privilege => {\r\n            if (selectedPrivileges.indexOf(privilege.id) > -1) a.push(clsx(privilege.title))\r\n            return a\r\n        })\r\n        return a.join(\", \")\r\n    }\r\n\r\n    return (\r\n        <Container\r\n            onKeyPress={(event) => handleKeyPress(event)}\r\n            className={classes.main}\r\n            maxWidth=\"xs\">\r\n            {\r\n                <Paper elevation={3}>\r\n                    <Box className={classes.paper}>\r\n                        <Typography className={clsx(classes.formElement, classes.titleText)}\r\n                                    variant=\"h5\">\r\n                            Создание заявки\r\n                        </Typography>\r\n                        {selectedPrivileges.length === 0 &&\r\n                        <Box className={classes.formElement}>\r\n                            <GazpromButton\r\n                                fullWidth\r\n                                variant=\"contained\"\r\n                                color=\"primary\"\r\n                                onClick={() => setSystemDialogOpen(true)}\r\n                                disabled={loading}\r\n                            >\r\n                                Выбрать информационную систему\r\n                            </GazpromButton>\r\n                        </Box>\r\n                        }\r\n                        {\r\n                            selectedPrivileges.length > 0 &&\r\n                            <Box className={clsx([classes.paper, classes.margin])}>\r\n                                <Box className={clsx(classes.regularText, classes.margin)}>\r\n                                    <Typography className={clsx(classes.formElement, classes.boldText)}>\r\n                                        <Link color=\"inherit\" onClick={()=>dialogOpen(0)}>\r\n                                        {systems.find(system => system.id === selectedSystem).title}\r\n                                        </Link>\r\n                                    </Typography>\r\n                                    <Typography className={clsx(classes.formElement, classes.boldText)}>\r\n                                        <Link color=\"inherit\" onClick={()=>dialogOpen(1)}>\r\n                                        Привилегии: {getPrivilegesString()}\r\n                                        </Link>\r\n                                    </Typography>\r\n                                    <Typography className={clsx(classes.formElement, classes.boldText)}>\r\n                                        Дата подачи: {`${date.getDate()}.${date.getMonth()}.${date.getFullYear()}`}\r\n                                    </Typography>\r\n                                </Box>\r\n                                <GazpromButton\r\n                                    className={clsx(classes.formElement, classes.margin)}\r\n                                    onClick={() => setRoleDialogOpen(true)}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\">\r\n                                    Добавить пользователей\r\n                                </GazpromButton>\r\n                                {selectedWorkers.length !== 0 &&\r\n                                <Box className={clsx(classes.regularText, classes.margin)}>\r\n                                    <Typography className={clsx(classes.formElement, classes.regularText)}>\r\n                                        <Link color=\"inherit\" onClick={() => setRoleDialogOpen(true)}>\r\n                                            Добавленные сотрудники ({selectedWorkers.length})\r\n                                        </Link>\r\n                                    </Typography>\r\n                                </Box>\r\n                                }\r\n                                <GazpromButton\r\n                                    className={clsx(classes.formElement, classes.margin)}\r\n                                    variant=\"contained\"\r\n                                    color=\"primary\"\r\n                                    onClick={sendRequest}\r\n                                    disabled={loading}\r\n                                >\r\n                                    Отправить заявку\r\n                                    {loading && <CircularProgress size={28} className={classes.buttonProgress}/>}\r\n                                </GazpromButton>\r\n                            </Box>\r\n                        }\r\n                    </Box>\r\n                </Paper>\r\n            }\r\n\r\n            <Dialog\r\n                open={systemDialogOpen}\r\n                onClose={() => setSystemDialogOpen(false)}>\r\n                <DialogTitle>{dialogStep === 0 ? \"Выберите информационную систему\" : \"Выберите привлегии\"}</DialogTitle>\r\n                <DialogContent className={classes.systems}>\r\n                    {dialogStep === 0 && systems.map((system, key) =>\r\n                        <FormControlLabel\r\n                            key={key}\r\n                            control={<GazpromRadio className={classes.check} checked={(system.id === selectedSystem)}\r\n                                                   onChange={() => systemChange(system.id)}/>}\r\n                            label={<Typography className={classes.littleText}>{system.title}</Typography>}\r\n                        />\r\n                    )}\r\n                    {dialogStep !== 0 && privileges.map((privilege, key) =>\r\n                        <Tooltip key={key} title={privilege.description}>\r\n                        <FormControlLabel\r\n                            control={\r\n                                <GazpromCheckbox className={classes.check}\r\n                                                      checked={(selectedPrivileges.indexOf(privilege.id) > -1)}\r\n                                                      onChange={() => privilegeChange(key)}/>\r\n                            }\r\n                            label={<Typography className={classes.littleText}>{privilege.title}</Typography>}\r\n                        />\r\n                        </Tooltip>\r\n                    )\r\n                    }\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <GazpromButton\r\n                        onClick={() => dialogStepChange(-1)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                        Назад\r\n                    </GazpromButton>\r\n                    <GazpromButton\r\n                        onClick={() => dialogStepChange(1)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                        Далее\r\n                    </GazpromButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n            <Dialog\r\n                open={roleDialogOpen}\r\n                onClose={() => setRoleDialogOpen(false)}>\r\n                <DialogTitle>Выберите сотрудников\r\n                    <GazpromTextField\r\n                        size=\"small\"\r\n                        fullWidth\r\n                        variant=\"outlined\"\r\n                        value={search}\r\n                        onChange={(event) => setSearch(event.target.value)}\r\n                    />\r\n                </DialogTitle>\r\n                <DialogContent className={classes.systems}>\r\n                    <List>\r\n                        {filterWorkers.map((worker, key) =>\r\n                            <ListItem key={key} dense button onClick={() => workerSelectChange(worker)}>\r\n                                <ListItemIcon>\r\n                                    <GazpromCheckbox\r\n                                        checked={(selectedWorkers.indexOf(worker.userId) > -1)}\r\n                                    />\r\n                                </ListItemIcon>\r\n                                <ListItemText primary={clsx(worker.lastName, worker.name,worker.middleName)}/>\r\n                            </ListItem>\r\n                        )\r\n                        }\r\n                    </List>\r\n                </DialogContent>\r\n                <DialogActions>\r\n                    <GazpromButton\r\n                        onClick={() => setRoleDialogOpen(false)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\">\r\n                        Далее\r\n                    </GazpromButton>\r\n                </DialogActions>\r\n            </Dialog>\r\n\r\n\r\n        </Container>\r\n    )\r\n}","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformationPanel.js",["106"],"import React, {useContext, useEffect, useState} from \"react\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport {Box, Typography} from \"@material-ui/core\";\r\nimport {useHistory, useParams} from \"react-router\";\r\nimport {BASE_URL, USER_INFORMATION} from \"../../../constants/Urls\";\r\nimport axios from \"axios\"\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport clsx from \"clsx\";\r\n\r\nconst useStyles = makeStyles(() => ({\r\n    main: {\r\n        paddingBottom: 20,\r\n        marginTop: 30,\r\n        borderRadius: 16,\r\n        background: \"#e2f1f8\",\r\n    },\r\n    mainText: {\r\n        fontSize: 38,\r\n        marginLeft: 30,\r\n        paddingTop: 20,\r\n        weight: 500\r\n    },\r\n    text: {\r\n        color: \"#888\",\r\n        fontSize: 20,\r\n        marginLeft: 30,\r\n    }\r\n}))\r\n\r\n\r\nexport default function UserInformationPanel({full}) {\r\n    const classes = useStyles()\r\n\r\n    const history = useHistory()\r\n\r\n    const [userInfo, setUserInfo] = useState({})\r\n\r\n    const {accessToken} = useContext(accessTokenContext)\r\n    const params = useParams();\r\n\r\n    useEffect(() => {\r\n        const request = {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            },\r\n            params: {\r\n                userId: params.userId\r\n            }\r\n        }\r\n        axios.get(BASE_URL + USER_INFORMATION, request)\r\n            .then(response => {\r\n                setUserInfo(response.data)\r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n            })\r\n    }, [accessToken, params.userId])\r\n\r\n    return (\r\n        <Box mx={2} className={classes.main}>\r\n            <Typography className={classes.mainText}>{clsx([userInfo.lastName,userInfo.name,userInfo.middleName])}</Typography>\r\n            {full &&\r\n            <Box>\r\n                <Typography className={classes.text}>Подразделение: {userInfo.department}</Typography>\r\n                <Typography className={classes.text}>Почта: {userInfo.email}</Typography>\r\n            </Box>\r\n            }\r\n\r\n        </Box>\r\n    )\r\n}","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\user\\userComponents\\UserInformation.js",["107"],"import UserInformationPanel from \"./UserInformationPanel\";\r\nimport {Box} from \"@material-ui/core\";\r\nimport RequestList from \"../../../components/RequestList\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport axios from \"axios\"\r\nimport {ACTIVE_REQUESTS, BASE_URL} from \"../../../constants/Urls\";\r\nimport {useHistory, useParams} from \"react-router\";\r\n\r\nexport default function UserInformation() {\r\n\r\n    const {accessToken} = useContext(accessTokenContext)\r\n    const params = useParams();\r\n\r\n    const [data,setData] = useState([])\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(()=>{\r\n        axios.get(BASE_URL+ACTIVE_REQUESTS,{\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            },\r\n            params: {\r\n                userId: params.userId\r\n            }})\r\n            .then(resp =>{\r\n                setData(resp.data)\r\n            })\r\n            .catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n            })\r\n    },[])\r\n\r\n    return (\r\n        <Box>\r\n            <UserInformationPanel/>\r\n            <Box mx={2}>\r\n                <RequestList title=\"Cписок активных заявок сотрудника\" data={data} privileges expiryDate/>\r\n            </Box>\r\n        </Box>\r\n    )\r\n\r\n}","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\constants\\Urls.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\AdminInformation.js",[],"C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\WorkerRegistration.js",["108","109"],"import {\r\n    CircularProgress,\r\n    Container,\r\n    FormControl,\r\n    InputBase,\r\n    MenuItem,\r\n    Select,\r\n    Typography,\r\n    Paper\r\n} from \"@material-ui/core\";\r\nimport React, {useContext, useEffect, useState} from \"react\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport {makeStyles} from \"@material-ui/core/styles\";\r\nimport clsx from \"clsx\";\r\nimport {GazpromTextField} from \"../../../components/GazpromTextField\";\r\nimport withStyles from \"@material-ui/core/styles/withStyles\";\r\nimport {GazpromButton} from \"../../../components/GazpromButton\";\r\nimport axios from \"axios\"\r\nimport {ADD_USER, ALL_DEPARTMENTS, ALL_UNITS, ALL_USERS, BASE_URL} from \"../../../constants/Urls\";\r\nimport {accessTokenContext} from \"../../../App\";\r\nimport {useHistory} from \"react-router\";\r\n\r\nconst GazpromInput = withStyles((theme) => ({\r\n    root: {\r\n        color: \"#888\",\r\n        width: theme.spacing(22),\r\n        'label + &': {\r\n            marginTop: theme.spacing(3),\r\n        },\r\n    },\r\n    input: {\r\n        borderRadius: 4,\r\n        border: '1px solid #D9D9D9',\r\n        fontSize: 16,\r\n        padding: '10px 26px 10px 12px',\r\n        '&:focus': {\r\n            borderRadius: 4,\r\n            borderColor: '#2D9CDB',\r\n        },\r\n    },\r\n}))(InputBase);\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    main: {\r\n        marginTop: 20,\r\n\r\n    },\r\n    formElement: {\r\n        marginBottom: 10,\r\n        position: \"relative\",\r\n        minHeight: 65\r\n    },\r\n    paper: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"center\",\r\n        paddingBottom: 30\r\n    },\r\n    margin: {\r\n        width: \"80%\"\r\n    },\r\n    regularText: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\"\r\n    },\r\n    titleText: {\r\n        marginTop: theme.spacing(3),\r\n        fontWeight: 600,\r\n        marginBottom: 20\r\n    },\r\n    buttonProgress: {\r\n        color: '#06c',\r\n        position: 'absolute',\r\n        left: '50%',\r\n        marginTop: 20,\r\n        marginLeft: -12,\r\n    },\r\n    systems: {\r\n        display: \"flex\",\r\n        flexDirection: \"column\",\r\n        alignItems: \"flex-start\",\r\n        maxHeight: 250\r\n    },\r\n    select: {\r\n        minWidth: 316\r\n    },\r\n    regButton: {\r\n        marginTop: 5\r\n    }\r\n}));\r\n\r\nexport default function WorkerRegistration() {\r\n    const classes = useStyles()\r\n    const {accessToken} = useContext(accessTokenContext)\r\n\r\n    const [units, setUnits] = useState([])\r\n    const [selectedUnit, setSelectedUnit] = useState(0)\r\n    const [unitLoading, setUnitLoading] = useState(true)\r\n\r\n    const [departments, setDepartments] = useState([])\r\n    const [selectedDepartment, setSelectedDepartment] = useState(0)\r\n    const [departmentsLoading, setDepartmentsLoading] = useState(true)\r\n\r\n    const [lastName, setLastName] = useState(\"\")\r\n    const [lastNameError, setLastNameError] = useState(false)\r\n    const [name, setName] = useState(\"\")\r\n    const [nameError, setNameError] = useState(false)\r\n    const [middleName, setMiddleName] = useState(\"\")\r\n    const [middleNameError, setMiddleNameError] = useState(false)\r\n    const [userName, setUserName] = useState(\"\")\r\n    const [userNameError, setUserNameError] = useState(false)\r\n    const [password, setPassword] = useState(\"\")\r\n    const [passwordError, setPasswordError] = useState(false)\r\n\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        axios.get(BASE_URL + ALL_UNITS,\r\n            {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer \" + accessToken\r\n                }\r\n            }\r\n        )\r\n            .then(resp => {\r\n\r\n                setUnits(resp.data)\r\n                setSelectedUnit(resp.data[0].id)\r\n                setUnitLoading(false)\r\n            })\r\n    }, [])\r\n\r\n    useEffect(() => {\r\n        if (units.length > 0) {\r\n            setDepartmentsLoading(true)\r\n            axios.get(BASE_URL + ALL_DEPARTMENTS, {\r\n                headers: {\r\n                    \"Content-Type\": \"application/json\",\r\n                    \"Authorization\": \"Bearer \" + accessToken\r\n                },\r\n                params: {\r\n                    unitId: selectedUnit\r\n                }\r\n            }).then(resp => {\r\n                setDepartments(resp.data)\r\n                setSelectedDepartment(resp.data[0].id)\r\n                setDepartmentsLoading(false)\r\n            }).catch(e => {\r\n                if (e.response.status === 401) history.push('/authorization')\r\n            })\r\n        }\r\n    }, [selectedUnit])\r\n\r\n    useEffect(() => {\r\n        setUserNameError(false)\r\n    }, [userName])\r\n    useEffect(() => {\r\n        setPasswordError(false)\r\n    }, [password])\r\n    useEffect(() => {\r\n        setNameError(false)\r\n    }, [name])\r\n    useEffect(() => {\r\n        setLastNameError(false)\r\n    }, [lastName])\r\n    useEffect(() => {\r\n        setMiddleNameError(false)\r\n    }, [middleName])\r\n\r\n    const unitHandleChange = (event) => {\r\n        setSelectedUnit(event.target.value)\r\n    }\r\n\r\n    const departmentHandleChange = (event) => {\r\n        setSelectedDepartment(event.target.value)\r\n    }\r\n\r\n    const registrate = () => {\r\n\r\n        const request = {\r\n            userName: userName,\r\n            password: password,\r\n            name: name,\r\n            lastName: lastName,\r\n            middleName: middleName,\r\n            email: \"devbybelousov@yandex.ru\",\r\n            departmentId: departments.find(departments => departments.id === selectedDepartment).id,\r\n            role: 0\r\n        }\r\n        axios.post(BASE_URL + ADD_USER, request, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            }\r\n        }).then(resp => {\r\n            console.log(resp)\r\n        }).catch(e => {\r\n            if (e.response.status === 401) history.push('/authorization')\r\n        })\r\n    }\r\n\r\n    const genPassword = (length) => {\r\n        if (length > 10) length = 10;\r\n        length = length * (-1);\r\n        return Math.random().toString(36).slice(length);\r\n    }\r\n\r\n    const getUserName = () => {\r\n        axios.get(BASE_URL + ALL_USERS, {\r\n            headers: {\r\n                \"Content-Type\": \"application/json\",\r\n                \"Authorization\": \"Bearer \" + accessToken\r\n            }\r\n        }).then(resp => {\r\n            console.log(resp)\r\n            setUserName(\"user\" + (resp.data[resp.data.length - 1].userId + 1))\r\n        })\r\n    }\r\n\r\n    const fieldsCheck = () => {\r\n        if (userName.trim() !== \"\" && password.trim() !== \"\" && name.trim() !== \"\" && lastName.trim() !== \"\" && middleName.trim() !== \"\") registrate()\r\n        else errorSearch()\r\n    }\r\n\r\n    const errorSearch = () => {\r\n        if (userName.trim() === \"\") setUserNameError(true)\r\n        if (password.trim() === \"\") setPasswordError(true)\r\n        if (name.trim() === \"\") setNameError(true)\r\n        if (lastName.trim() === \"\") setLastNameError(true)\r\n        if (middleName.trim() === \"\") setMiddleNameError(true)\r\n    }\r\n\r\n    return (\r\n        <Container className={classes.main} maxWidth=\"xs\">\r\n            <Paper elevation={3}>\r\n                <Box className={classes.paper}>\r\n\r\n                    <Typography\r\n                        className={clsx(classes.titleText)}\r\n                        variant=\"h5\"\r\n                    >\r\n                        Регистрация сотрудника\r\n                    </Typography>\r\n\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Фамилия\r\n                        </Typography>\r\n                        <GazpromTextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={lastName}\r\n                            onChange={event => setLastName(event.target.value)}\r\n                            error={lastNameError}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Имя\r\n                        </Typography>\r\n                        <GazpromTextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={name}\r\n                            onChange={event => setName(event.target.value)}\r\n                            error={nameError}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Отчество\r\n                        </Typography>\r\n                        <GazpromTextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={middleName}\r\n                            onChange={event => setMiddleName(event.target.value)}\r\n                            error={middleNameError}\r\n                        />\r\n                    </Box>\r\n\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Отдел\r\n                        </Typography>\r\n                        {unitLoading ? <CircularProgress size={28} className={classes.buttonProgress}/> :\r\n                            <FormControl>\r\n                                <Select\r\n                                    className={classes.select}\r\n                                    disabled={unitLoading}\r\n                                    onChange={unitHandleChange}\r\n                                    input={<GazpromInput/>}\r\n                                    value={units.find(unit => unit.id === selectedUnit).id}\r\n                                >\r\n                                    {units.length > 0 && units.map((unit, key) =>\r\n                                        <MenuItem value={unit.id} key={key}>{unit.title}</MenuItem>\r\n                                    )\r\n                                    }\r\n                                </Select>\r\n                            </FormControl>\r\n\r\n                        }\r\n                    </Box>\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Подразделения\r\n                        </Typography>\r\n                        {departmentsLoading ? <CircularProgress size={28} className={classes.buttonProgress}/> :\r\n                            <FormControl>\r\n                                <Select className={classes.select}\r\n                                        disabled={departmentsLoading}\r\n                                        onChange={departmentHandleChange}\r\n                                        input={<GazpromInput/>}\r\n                                        value={departments.find(department => department.id === selectedDepartment).id}\r\n                                >\r\n                                    {departments.map((department, key) =>\r\n                                        <MenuItem key={key} value={department.id}>{department.title} </MenuItem>\r\n                                    )}\r\n                                </Select>\r\n                            </FormControl>\r\n                        }\r\n\r\n                    </Box>\r\n\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Логин\r\n                        </Typography>\r\n                        <GazpromButton\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={getUserName}\r\n\r\n                        >Сгенерировать логин</GazpromButton>\r\n                        <GazpromTextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={userName}\r\n                            error={userNameError}\r\n                            onChange={event => setUserName(event.target.value)}\r\n                        />\r\n                    </Box>\r\n                    <Box className={clsx(classes.formElement, classes.margin)}>\r\n                        <Typography>\r\n                            Пароль\r\n                        </Typography>\r\n                        <GazpromButton\r\n                            fullWidth\r\n                            variant=\"contained\"\r\n                            color=\"primary\"\r\n                            onClick={() => setPassword(genPassword(8))}\r\n\r\n                        >Сгенерировать пароль</GazpromButton>\r\n                        <GazpromTextField\r\n                            size=\"small\"\r\n                            fullWidth\r\n                            variant=\"outlined\"\r\n                            value={password}\r\n                            onChange={event => setPassword(event.target.value)}\r\n                            error={passwordError}\r\n                        />\r\n                    </Box>\r\n\r\n\r\n                    <GazpromButton\r\n                        className={clsx(classes.margin, classes.regButton)}\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={fieldsCheck}\r\n                    >Зарегистрировать</GazpromButton>\r\n                </Box>\r\n            </Paper>\r\n        </Container>\r\n    )\r\n}","C:\\Users\\ОчкоСвоёНазови\\Desktop\\УЧЁБА\\3 курс\\ГПО\\new-gazprom\\src\\views\\admin\\adminComponents\\Request.js",["110"],{"ruleId":null,"fatal":true,"severity":2,"message":"111","line":15,"column":9},{"ruleId":"112","replacedBy":"113"},{"ruleId":"114","replacedBy":"115"},{"ruleId":"112","replacedBy":"116"},{"ruleId":"114","replacedBy":"117"},{"ruleId":"118","severity":1,"message":"119","line":7,"column":8,"nodeType":"120","messageId":"121","endLine":7,"endColumn":21},{"ruleId":"118","severity":1,"message":"122","line":10,"column":8,"nodeType":"120","messageId":"121","endLine":10,"endColumn":15},{"ruleId":"123","severity":1,"message":"124","line":32,"column":7,"nodeType":"125","endLine":32,"endColumn":9,"suggestions":"126"},{"ruleId":"123","severity":1,"message":"127","line":46,"column":8,"nodeType":"125","endLine":46,"endColumn":10,"suggestions":"128"},{"ruleId":"123","severity":1,"message":"129","line":192,"column":8,"nodeType":"125","endLine":192,"endColumn":10,"suggestions":"130"},{"ruleId":"118","severity":1,"message":"131","line":6,"column":9,"nodeType":"120","messageId":"121","endLine":6,"endColumn":25},{"ruleId":"123","severity":1,"message":"132","line":133,"column":8,"nodeType":"125","endLine":133,"endColumn":10,"suggestions":"133"},{"ruleId":"123","severity":1,"message":"134","line":58,"column":8,"nodeType":"125","endLine":58,"endColumn":36,"suggestions":"135"},{"ruleId":"123","severity":1,"message":"136","line":34,"column":7,"nodeType":"125","endLine":34,"endColumn":9,"suggestions":"137"},{"ruleId":"123","severity":1,"message":"138","line":134,"column":8,"nodeType":"125","endLine":134,"endColumn":10,"suggestions":"139"},{"ruleId":"123","severity":1,"message":"140","line":155,"column":8,"nodeType":"125","endLine":155,"endColumn":22,"suggestions":"141"},{"ruleId":"123","severity":1,"message":"142","line":167,"column":8,"nodeType":"125","endLine":167,"endColumn":14,"suggestions":"143"},"Parsing error: Unexpected token\n\n  13 |     return (\n  14 |         <roleContext.Provider value={{role,roleContext}}\n> 15 |         <accessTokenContext.Provider value={{accessToken, setAccessToken}}>\n     |         ^\n  16 |             <Switch>\n  17 |                 <Route exact path=\"/authorization\" component={Authorization}/>\n  18 |                 <Route path=\"/user=:userId\" component={UserView}/>","no-native-reassign",["144"],"no-negated-in-lhs",["145"],["144"],["145"],"no-unused-vars","'CreateRequest' is defined but never used.","Identifier","unusedVar","'Request' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'a'. Either include it or remove the dependency array.","ArrayExpression",["146"],"React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'userId'. Either include them or remove the dependency array.",["147"],"React Hook useEffect has missing dependencies: 'newRequest', 'selectSortCategory', 'sortCategories', and 'sortOrder'. Either include them or remove the dependency array.",["148"],"'GazpromTextField' is defined but never used.","React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'workerSelfException'. Either include them or remove the dependency array.",["149"],"React Hook useEffect has a missing dependency: 'history'. Either include it or remove the dependency array.",["150"],"React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'params.userId'. Either include them or remove the dependency array.",["151"],"React Hook useEffect has a missing dependency: 'accessToken'. Either include it or remove the dependency array.",["152"],"React Hook useEffect has missing dependencies: 'accessToken', 'history', and 'units.length'. Either include them or remove the dependency array.",["153"],"React Hook useEffect has missing dependencies: 'accessToken', 'requestId', and 'setData'. Either include them or remove the dependency array.",["154"],"no-global-assign","no-unsafe-negation",{"desc":"155","fix":"156"},{"desc":"157","fix":"158"},{"desc":"159","fix":"160"},{"desc":"161","fix":"162"},{"desc":"163","fix":"164"},{"desc":"163","fix":"165"},{"desc":"166","fix":"167"},{"desc":"168","fix":"169"},{"desc":"170","fix":"171"},"Update the dependencies array to be: [a]",{"range":"172","text":"173"},"Update the dependencies array to be: [accessToken, history, userId]",{"range":"174","text":"175"},"Update the dependencies array to be: [newRequest, selectSortCategory, sortCategories, sortOrder]",{"range":"176","text":"177"},"Update the dependencies array to be: [accessToken, history, workerSelfException]",{"range":"178","text":"179"},"Update the dependencies array to be: [accessToken, history, params.userId]",{"range":"180","text":"181"},{"range":"182","text":"181"},"Update the dependencies array to be: [accessToken]",{"range":"183","text":"184"},"Update the dependencies array to be: [accessToken, history, selectedUnit, units.length]",{"range":"185","text":"186"},"Update the dependencies array to be: [accessToken, open, requestId, setData]",{"range":"187","text":"188"},[942,944],"[a]",[1488,1490],"[accessToken, history, userId]",[6076,6078],"[newRequest, selectSortCategory, sortCategories, sortOrder]",[4066,4068],"[accessToken, history, workerSelfException]",[1627,1655],"[accessToken, history, params.userId]",[1147,1149],[3824,3826],"[accessToken]",[4554,4568],"[accessToken, history, selectedUnit, units.length]",[4808,4814],"[accessToken, open, requestId, setData]"]